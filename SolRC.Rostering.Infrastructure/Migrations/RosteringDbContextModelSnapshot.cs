// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolRC.Rostering.Infrastructure.Data;

#nullable disable

namespace SolRC.Rostering.Infrastructure.Migrations
{
    [DbContext(typeof(RosteringDbContext))]
    partial class RosteringDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelieverId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PitId");

                    b.HasIndex("RelieverId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShiftEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.GamingFloor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GamingFloor");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeNumber");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Pit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GamingFloorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GamingFloorId");

                    b.ToTable("Pits");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Game")
                        .HasColumnType("int");

                    b.Property<int>("Proficiency")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClusterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Game")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MaxRequiredProficiency")
                        .HasColumnType("int");

                    b.Property<int>("MinRequiredProficiency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.TableAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HoursId");

                    b.HasIndex("TableId");

                    b.ToTable("TableAssignments");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Time", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Close")
                        .HasColumnType("datetime2");

                    b.Property<int>("Demand")
                        .HasColumnType("int");

                    b.Property<DateTime>("Open")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftClass")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Cluster", b =>
                {
                    b.HasOne("SolRC.Rostering.Domain.Models.Pit", null)
                        .WithMany("Clusters")
                        .HasForeignKey("PitId");

                    b.HasOne("SolRC.Rostering.Domain.Models.Employee", "Reliever")
                        .WithMany()
                        .HasForeignKey("RelieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reliever");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Leave", b =>
                {
                    b.HasOne("SolRC.Rostering.Domain.Models.Employee", null)
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolRC.Rostering.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeNumber")
                        .HasPrincipalKey("Number")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Pit", b =>
                {
                    b.HasOne("SolRC.Rostering.Domain.Models.GamingFloor", null)
                        .WithMany("Pits")
                        .HasForeignKey("GamingFloorId");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Skill", b =>
                {
                    b.HasOne("SolRC.Rostering.Domain.Models.Employee", "Employee")
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Table", b =>
                {
                    b.HasOne("SolRC.Rostering.Domain.Models.Cluster", null)
                        .WithMany("TableGames")
                        .HasForeignKey("ClusterId");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.TableAssignment", b =>
                {
                    b.HasOne("SolRC.Rostering.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolRC.Rostering.Domain.Models.Time", "Hours")
                        .WithMany()
                        .HasForeignKey("HoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolRC.Rostering.Domain.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Hours");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Time", b =>
                {
                    b.HasOne("SolRC.Rostering.Domain.Models.Table", "Table")
                        .WithMany("OperatingShifts")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Cluster", b =>
                {
                    b.Navigation("TableGames");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Employee", b =>
                {
                    b.Navigation("Leaves");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.GamingFloor", b =>
                {
                    b.Navigation("Pits");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Pit", b =>
                {
                    b.Navigation("Clusters");
                });

            modelBuilder.Entity("SolRC.Rostering.Domain.Models.Table", b =>
                {
                    b.Navigation("OperatingShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
